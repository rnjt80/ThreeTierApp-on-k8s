@Library("shared_groovy")_
pipeline {
    environment {
        dockerImageName = "rnjt80/backend"
        docker = "/usr/local/bin/docker"
        repoUrl = "https://github.com/rnjt80/ThreeTierApp-on-k8s.git"
        repoBranch = "${env.BRANCH_NAME}"
        changeBranch = "${env.CHANGE_BRANCH}"
        changeTarget = "${env.CHANGE_TARGET}"
        versionfile = "package.json"
        
    }
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
        dockerTool 'docker'
    }
 
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repo from Git') {
            steps {
                script {
                    sh 'echo ${repoBranch}'
                    gitClone("github", repoUrl, repoBranch)
                }
            }
        }
        
        stage("Docker Image Build and Push") {
            environment {
               registryCredential = 'dockerhub'
            }
            steps {
               script {
                    dir('app/backend') {
                        
                        echo "Building an image"
                        def builtImage = docker_Image(versionfile, dockerImageName)
                        echo "Image tag ${env.ImageTag}"
                        docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) {
                        echo "Pushing image ${builtImage} to dockerHub"
                        builtImage.push()
                        }
                    }
                }
            }
        }
        
        
        stage('Update K8s manifest file') {
            when {
                branch 'main' // Or other production branch
            }

            environment {
                GIT_REPO_NAME = "ThreeTierApp-on-k8s"
                GIT_USER_NAME = "rnjt80"
            }
            steps {
                dir('k8s/Backend') {
                    withCredentials([string(credentialsId: 'Github', variable: 'GITHUB_TOKEN')]) {
                        withEnv(["PATH+GREP=/opt/homebrew/opt/grep/libexec/gnubin"]) {
                            script {
                                sh '''
                                    git config user.email "rnjtsangamnere@gmail.com"
                                    git config user.name "${GIT_USER_NAME}"
                                    echo "${ImageTag}"
                                    BUILD_NUMBER=${ImageTag}
                                    echo $BUILD_NUMBER 
                                    imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                                    echo $imageTag
                                    if ($imageTag != $BUILD_NUMBER) {
                                        sed -i '' "s|${dockerImageName}:${imageTag}|${dockerImageName}:${BUILD_NUMBER}|g" deployment.yaml
                                    
                                        echo "Branch ${repoBranch}"
                                        git status
                                        git diff
                                        git add deployment.yaml
                                        git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                                        git push ${repoUrl} HEAD:${repoBranch}
                                    } else {
                                        echo "No change in version"
                                    }
                                '''
                            }
                        }
                    }
               }
            }
        }
       
         stage('Deploy to Kubernetes') {
            when {
                branch 'main' // Or other production branch
            }

            steps {
                script {
                    dir('k8s/Backend') {
                        withKubeConfig([credentialsId: 'kubeconfig']) {
                            if (env.BRANCH_NAME == 'main' && env.CHANGE_TARGET == 'main') {
                                sh 'kubectl apply -f deployment.yaml'
                            } else if (env.CHANGE_TARGET == 'main') {
                                sh 'kubectl apply -f deployment.yaml --dry-run=client'
                            }
                        }
                    }
                }
            }
        }
    }
}
